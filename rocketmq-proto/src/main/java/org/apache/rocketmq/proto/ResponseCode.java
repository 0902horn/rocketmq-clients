// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rocketmq.proto

package org.apache.rocketmq.proto;

/**
 * Protobuf enum {@code rocketmq.rpc.api.ResponseCode}
 */
public enum ResponseCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SUCCESS = 0;</code>
   */
  SUCCESS(0),
  /**
   * <code>SYSTEM_ERROR = 1;</code>
   */
  SYSTEM_ERROR(1),
  /**
   * <code>SYSTEM_BUSY = 2;</code>
   */
  SYSTEM_BUSY(2),
  /**
   * <code>REQUEST_CODE_NOT_SUPPORTED = 3;</code>
   */
  REQUEST_CODE_NOT_SUPPORTED(3),
  /**
   * <code>TRANSACTION_FAILED = 4;</code>
   */
  TRANSACTION_FAILED(4),
  /**
   * <code>FLUSH_DISK_TIMEOUT = 10;</code>
   */
  FLUSH_DISK_TIMEOUT(10),
  /**
   * <code>SLAVE_NOT_AVAILABLE = 11;</code>
   */
  SLAVE_NOT_AVAILABLE(11),
  /**
   * <code>FLUSH_SLAVE_TIMEOUT = 12;</code>
   */
  FLUSH_SLAVE_TIMEOUT(12),
  /**
   * <code>MESSAGE_ILLEGAL = 13;</code>
   */
  MESSAGE_ILLEGAL(13),
  /**
   * <code>SERVICE_NOT_AVAILABLE = 14;</code>
   */
  SERVICE_NOT_AVAILABLE(14),
  /**
   * <code>VERSION_NOT_SUPPORTED = 15;</code>
   */
  VERSION_NOT_SUPPORTED(15),
  /**
   * <code>NO_PERMISSION = 16;</code>
   */
  NO_PERMISSION(16),
  /**
   * <code>TOPIC_NOT_EXIST = 17;</code>
   */
  TOPIC_NOT_EXIST(17),
  /**
   * <code>TOPIC_EXIST_ALREADY = 18;</code>
   */
  TOPIC_EXIST_ALREADY(18),
  /**
   * <code>PULL_NOT_FOUND = 19;</code>
   */
  PULL_NOT_FOUND(19),
  /**
   * <code>PULL_RETRY_IMMEDIATELY = 20;</code>
   */
  PULL_RETRY_IMMEDIATELY(20),
  /**
   * <code>PULL_OFFSET_MOVED = 21;</code>
   */
  PULL_OFFSET_MOVED(21),
  /**
   * <code>QUERY_NOT_FOUND = 22;</code>
   */
  QUERY_NOT_FOUND(22),
  /**
   * <code>SUBSCRIPTION_PARSE_FAILED = 23;</code>
   */
  SUBSCRIPTION_PARSE_FAILED(23),
  /**
   * <code>SUBSCRIPTION_NOT_EXIST = 24;</code>
   */
  SUBSCRIPTION_NOT_EXIST(24),
  /**
   * <code>SUBSCRIPTION_NOT_LATEST = 25;</code>
   */
  SUBSCRIPTION_NOT_LATEST(25),
  /**
   * <code>SUBSCRIPTION_GROUP_NOT_EXIST = 26;</code>
   */
  SUBSCRIPTION_GROUP_NOT_EXIST(26),
  /**
   * <code>FILTER_DATA_NOT_EXIST = 27;</code>
   */
  FILTER_DATA_NOT_EXIST(27),
  /**
   * <code>FILTER_DATA_NOT_LATEST = 28;</code>
   */
  FILTER_DATA_NOT_LATEST(28),
  /**
   * <code>TRANSACTION_SHOULD_COMMIT = 200;</code>
   */
  TRANSACTION_SHOULD_COMMIT(200),
  /**
   * <code>TRANSACTION_SHOULD_ROLLBACK = 201;</code>
   */
  TRANSACTION_SHOULD_ROLLBACK(201),
  /**
   * <code>TRANSACTION_STATE_UNKNOW = 202;</code>
   */
  TRANSACTION_STATE_UNKNOW(202),
  /**
   * <code>TRANSACTION_STATE_GROUP_WRONG = 203;</code>
   */
  TRANSACTION_STATE_GROUP_WRONG(203),
  /**
   * <code>NO_BUYER_ID = 204;</code>
   */
  NO_BUYER_ID(204),
  /**
   * <code>NOT_IN_CURRENT_UNIT = 205;</code>
   */
  NOT_IN_CURRENT_UNIT(205),
  /**
   * <code>CONSUMER_NOT_ONLINE = 206;</code>
   */
  CONSUMER_NOT_ONLINE(206),
  /**
   * <code>CONSUME_MSG_TIMEOUT = 207;</code>
   */
  CONSUME_MSG_TIMEOUT(207),
  /**
   * <code>NO_MESSAGE = 208;</code>
   */
  NO_MESSAGE(208),
  /**
   * <code>POLLING_FULL = 209;</code>
   */
  POLLING_FULL(209),
  /**
   * <code>POLLING_TIMEOUT = 210;</code>
   */
  POLLING_TIMEOUT(210),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SUCCESS = 0;</code>
   */
  public static final int SUCCESS_VALUE = 0;
  /**
   * <code>SYSTEM_ERROR = 1;</code>
   */
  public static final int SYSTEM_ERROR_VALUE = 1;
  /**
   * <code>SYSTEM_BUSY = 2;</code>
   */
  public static final int SYSTEM_BUSY_VALUE = 2;
  /**
   * <code>REQUEST_CODE_NOT_SUPPORTED = 3;</code>
   */
  public static final int REQUEST_CODE_NOT_SUPPORTED_VALUE = 3;
  /**
   * <code>TRANSACTION_FAILED = 4;</code>
   */
  public static final int TRANSACTION_FAILED_VALUE = 4;
  /**
   * <code>FLUSH_DISK_TIMEOUT = 10;</code>
   */
  public static final int FLUSH_DISK_TIMEOUT_VALUE = 10;
  /**
   * <code>SLAVE_NOT_AVAILABLE = 11;</code>
   */
  public static final int SLAVE_NOT_AVAILABLE_VALUE = 11;
  /**
   * <code>FLUSH_SLAVE_TIMEOUT = 12;</code>
   */
  public static final int FLUSH_SLAVE_TIMEOUT_VALUE = 12;
  /**
   * <code>MESSAGE_ILLEGAL = 13;</code>
   */
  public static final int MESSAGE_ILLEGAL_VALUE = 13;
  /**
   * <code>SERVICE_NOT_AVAILABLE = 14;</code>
   */
  public static final int SERVICE_NOT_AVAILABLE_VALUE = 14;
  /**
   * <code>VERSION_NOT_SUPPORTED = 15;</code>
   */
  public static final int VERSION_NOT_SUPPORTED_VALUE = 15;
  /**
   * <code>NO_PERMISSION = 16;</code>
   */
  public static final int NO_PERMISSION_VALUE = 16;
  /**
   * <code>TOPIC_NOT_EXIST = 17;</code>
   */
  public static final int TOPIC_NOT_EXIST_VALUE = 17;
  /**
   * <code>TOPIC_EXIST_ALREADY = 18;</code>
   */
  public static final int TOPIC_EXIST_ALREADY_VALUE = 18;
  /**
   * <code>PULL_NOT_FOUND = 19;</code>
   */
  public static final int PULL_NOT_FOUND_VALUE = 19;
  /**
   * <code>PULL_RETRY_IMMEDIATELY = 20;</code>
   */
  public static final int PULL_RETRY_IMMEDIATELY_VALUE = 20;
  /**
   * <code>PULL_OFFSET_MOVED = 21;</code>
   */
  public static final int PULL_OFFSET_MOVED_VALUE = 21;
  /**
   * <code>QUERY_NOT_FOUND = 22;</code>
   */
  public static final int QUERY_NOT_FOUND_VALUE = 22;
  /**
   * <code>SUBSCRIPTION_PARSE_FAILED = 23;</code>
   */
  public static final int SUBSCRIPTION_PARSE_FAILED_VALUE = 23;
  /**
   * <code>SUBSCRIPTION_NOT_EXIST = 24;</code>
   */
  public static final int SUBSCRIPTION_NOT_EXIST_VALUE = 24;
  /**
   * <code>SUBSCRIPTION_NOT_LATEST = 25;</code>
   */
  public static final int SUBSCRIPTION_NOT_LATEST_VALUE = 25;
  /**
   * <code>SUBSCRIPTION_GROUP_NOT_EXIST = 26;</code>
   */
  public static final int SUBSCRIPTION_GROUP_NOT_EXIST_VALUE = 26;
  /**
   * <code>FILTER_DATA_NOT_EXIST = 27;</code>
   */
  public static final int FILTER_DATA_NOT_EXIST_VALUE = 27;
  /**
   * <code>FILTER_DATA_NOT_LATEST = 28;</code>
   */
  public static final int FILTER_DATA_NOT_LATEST_VALUE = 28;
  /**
   * <code>TRANSACTION_SHOULD_COMMIT = 200;</code>
   */
  public static final int TRANSACTION_SHOULD_COMMIT_VALUE = 200;
  /**
   * <code>TRANSACTION_SHOULD_ROLLBACK = 201;</code>
   */
  public static final int TRANSACTION_SHOULD_ROLLBACK_VALUE = 201;
  /**
   * <code>TRANSACTION_STATE_UNKNOW = 202;</code>
   */
  public static final int TRANSACTION_STATE_UNKNOW_VALUE = 202;
  /**
   * <code>TRANSACTION_STATE_GROUP_WRONG = 203;</code>
   */
  public static final int TRANSACTION_STATE_GROUP_WRONG_VALUE = 203;
  /**
   * <code>NO_BUYER_ID = 204;</code>
   */
  public static final int NO_BUYER_ID_VALUE = 204;
  /**
   * <code>NOT_IN_CURRENT_UNIT = 205;</code>
   */
  public static final int NOT_IN_CURRENT_UNIT_VALUE = 205;
  /**
   * <code>CONSUMER_NOT_ONLINE = 206;</code>
   */
  public static final int CONSUMER_NOT_ONLINE_VALUE = 206;
  /**
   * <code>CONSUME_MSG_TIMEOUT = 207;</code>
   */
  public static final int CONSUME_MSG_TIMEOUT_VALUE = 207;
  /**
   * <code>NO_MESSAGE = 208;</code>
   */
  public static final int NO_MESSAGE_VALUE = 208;
  /**
   * <code>POLLING_FULL = 209;</code>
   */
  public static final int POLLING_FULL_VALUE = 209;
  /**
   * <code>POLLING_TIMEOUT = 210;</code>
   */
  public static final int POLLING_TIMEOUT_VALUE = 210;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ResponseCode valueOf(int value) {
    return forNumber(value);
  }

  public static ResponseCode forNumber(int value) {
    switch (value) {
      case 0: return SUCCESS;
      case 1: return SYSTEM_ERROR;
      case 2: return SYSTEM_BUSY;
      case 3: return REQUEST_CODE_NOT_SUPPORTED;
      case 4: return TRANSACTION_FAILED;
      case 10: return FLUSH_DISK_TIMEOUT;
      case 11: return SLAVE_NOT_AVAILABLE;
      case 12: return FLUSH_SLAVE_TIMEOUT;
      case 13: return MESSAGE_ILLEGAL;
      case 14: return SERVICE_NOT_AVAILABLE;
      case 15: return VERSION_NOT_SUPPORTED;
      case 16: return NO_PERMISSION;
      case 17: return TOPIC_NOT_EXIST;
      case 18: return TOPIC_EXIST_ALREADY;
      case 19: return PULL_NOT_FOUND;
      case 20: return PULL_RETRY_IMMEDIATELY;
      case 21: return PULL_OFFSET_MOVED;
      case 22: return QUERY_NOT_FOUND;
      case 23: return SUBSCRIPTION_PARSE_FAILED;
      case 24: return SUBSCRIPTION_NOT_EXIST;
      case 25: return SUBSCRIPTION_NOT_LATEST;
      case 26: return SUBSCRIPTION_GROUP_NOT_EXIST;
      case 27: return FILTER_DATA_NOT_EXIST;
      case 28: return FILTER_DATA_NOT_LATEST;
      case 200: return TRANSACTION_SHOULD_COMMIT;
      case 201: return TRANSACTION_SHOULD_ROLLBACK;
      case 202: return TRANSACTION_STATE_UNKNOW;
      case 203: return TRANSACTION_STATE_GROUP_WRONG;
      case 204: return NO_BUYER_ID;
      case 205: return NOT_IN_CURRENT_UNIT;
      case 206: return CONSUMER_NOT_ONLINE;
      case 207: return CONSUME_MSG_TIMEOUT;
      case 208: return NO_MESSAGE;
      case 209: return POLLING_FULL;
      case 210: return POLLING_TIMEOUT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ResponseCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ResponseCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ResponseCode>() {
          public ResponseCode findValueByNumber(int number) {
            return ResponseCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.apache.rocketmq.proto.ACS.getDescriptor().getEnumTypes().get(0);
  }

  private static final ResponseCode[] VALUES = values();

  public static ResponseCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ResponseCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:rocketmq.rpc.api.ResponseCode)
}

