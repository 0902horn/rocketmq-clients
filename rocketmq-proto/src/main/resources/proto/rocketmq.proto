syntax = "proto3";

package rocketmq.rpc.api;

option java_multiple_files = true;
option java_package = "org.apache.rocketmq.proto";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;

// Ali Cloud Service
option java_outer_classname = "ACS";

enum ResponseCode {
  SUCCESS = 0;
  SYSTEM_ERROR = 1;
  SYSTEM_BUSY = 2;
  REQUEST_CODE_NOT_SUPPORTED = 3;
  TRANSACTION_FAILED = 4;
  FLUSH_DISK_TIMEOUT = 10;
  SLAVE_NOT_AVAILABLE = 11;
  FLUSH_SLAVE_TIMEOUT = 12;
  MESSAGE_ILLEGAL = 13;
  SERVICE_NOT_AVAILABLE = 14;
  VERSION_NOT_SUPPORTED = 15;
  NO_PERMISSION = 16;
  TOPIC_NOT_EXIST = 17;
  TOPIC_EXIST_ALREADY = 18;
  PULL_NOT_FOUND = 19;
  PULL_RETRY_IMMEDIATELY = 20;
  PULL_OFFSET_MOVED = 21;
  QUERY_NOT_FOUND = 22;
  SUBSCRIPTION_PARSE_FAILED = 23;
  SUBSCRIPTION_NOT_EXIST = 24;
  SUBSCRIPTION_NOT_LATEST = 25;
  SUBSCRIPTION_GROUP_NOT_EXIST = 26;
  FILTER_DATA_NOT_EXIST = 27;
  FILTER_DATA_NOT_LATEST = 28;
  TRANSACTION_SHOULD_COMMIT = 200;
  TRANSACTION_SHOULD_ROLLBACK = 201;
  TRANSACTION_STATE_UNKNOW = 202;
  TRANSACTION_STATE_GROUP_WRONG = 203;
  NO_BUYER_ID = 204;
  NOT_IN_CURRENT_UNIT = 205;
  CONSUMER_NOT_ONLINE = 206;
  CONSUME_MSG_TIMEOUT = 207;
  NO_MESSAGE = 208;
  POLLING_FULL = 209;
  POLLING_TIMEOUT = 210;
}

message RouteInfoRequest {
  repeated string topic = 1;
}

message QueueData {
  string broker_name = 1;
  int32 read_queue_number = 2;
  int32 write_queue_number = 3;
  int32 permission = 4;
  int32 topic_system_flag = 5;
}

message BrokerData {
  string cluster = 1;
  string broker_name = 2;
  map<int64, string> addresses = 3;
}

message FilterServerAddress {
  repeated string address = 1;
}

message TopicRouteData {
  string order_topic_configuration = 1;
  repeated QueueData queue_data = 2;
  repeated BrokerData broker_data = 3;
  map<string, FilterServerAddress> filter_server_addresses = 4;
}

message RouteInfoResponse {
  ResponseCode code = 1;
  string remark = 2;
  map<string, TopicRouteData> route = 3;
}

message Message {
  string topic = 1;
  int32 flag = 2;
  map<string, string> properties = 3;
  bytes body = 4;
}

message SendMessageRequest {
  string producer_group = 1;
  string default_topic = 2;
  int32 default_topic_queue_number = 3;
  int32 queue_id = 4;
  int32 system_flag = 5;
  int64 born_timestamp = 6;
  int32 reconsume_times = 7;
  bool unit_mode = 8;
  bool batch = 9;
  int32 max_reconsume_time = 10;
  int32 sys_flag = 11;
  Message message = 12;
  string broker_name = 13;
}

message SendMessageResponse {
  ResponseCode code = 1;
  string remark = 2;
  string message_id = 3;
  int32 queue_id = 4;
  int64 queue_offset = 5;
  string transaction_id = 6;
}

message EndTransactionRequest {
  string producer_group = 1;
  int64 transaction_state_table_offset = 2;
  int64 commit_log_offset = 3;

  enum Resolution {
    COMMIT = 0;
    ROLLBACK = 1;
  }
  Resolution resolution = 4;
  bool from_transaction_check = 5;
  string msg_id = 6;
  string transaction_id = 7;
  string broker_name = 8;
}

message EndTransactionResponse {
  string message = 1;
}

enum MessageModel {
  BROADCASTING = 0;
  CLUSTERING = 1;
}

enum ConsumeType {
  ACTIVE = 0;
  PASSIVE = 1;
}

enum ConsumeFrom {
  LAST_OFFSET = 0;
  TIMESTAMP = 1;
  MIN_OFFSET = 2;
  MAX_OFFSET = 3;
}

message QueryAssignmentRequest {
  string topic = 1;
  string consumer_group = 2;
  string client_id = 3;
  string strategy_name = 4;
  MessageModel message_model = 5;
  string broker_name = 6;
}

message MessageQueue {
  string topic = 1;
  string broker_name = 2;
  int32 queue_id = 3;
}

enum MessageRequestMode {
  PULL = 0;
  POP = 1;
}

message MessageQueueAssignment {
  MessageQueue message_queue = 1;
  MessageRequestMode mode = 2;
  map<string, string> attachments = 3;
}

message QueryAssignmentResponse {
  ResponseCode code = 1;
  string remark = 2;
  repeated MessageQueueAssignment message_queue_assignments = 3;
}

message PopMessageRequest {
  string consumer_group = 1;
  string topic = 2;
  int32 queue_id = 3;
  int32 max_message_number = 4;
  int64 invisible_time = 5;
  int64 poll_time = 6;
  int64 born_timestamp = 7;

  enum ConsumeInitialMode {
    MIN = 0;
    MAX = 1;
  }
  ConsumeInitialMode initial_mode = 8;
  string expression_type = 9;
  string expression = 10;
  bool order = 11;
  string broker_name = 12;

  // Each request bears an increasing sequence member
  int64 term_id = 13;
}

message MessageExt {
  Message base = 1;
  message Extension {
    string broker_name = 1;
    int32 queue_id = 2;
    int32 store_size = 3;
    int64 queue_offset = 4;
    int32 sys_flag = 5;
    int64 born_timestamp = 6;
    string born_host = 7;
    int64 store_timestamp = 8;
    string store_host = 9;
    string message_id = 10;
    int64 commit_log_offset = 11;
    int32 body_crc = 12;
    int32 reconsume_times = 13;
    int64 prepared_transaction_offset = 14;
  }
  Extension extension = 2;
}

message PopMessageResponse {
  ResponseCode code = 1;
  string remark = 2;
  int64 pop_time = 3;
  int64 invisible_time = 4;
  int32 revive_queue_id = 5;
  int64 rest_number = 6;
  repeated MessageExt messages = 7;
  int64 term_id = 8;
}

message AckMessageRequest {
  string consumer_group = 1;
  string topic = 2;
  int32 queue_id = 3;
  string extra_info = 4;
  int64 offset = 5;
  string broker_name = 6;
}

message AckMessageResponse {
  ResponseCode code = 1;
  string remark = 2;
}

message SubscriptionData {
  string topic = 1;
  string sub_string = 2;
  int64  sub_version = 3;

  enum ExpressionType {
    TAG = 0;
    SQL = 1;
  }
  ExpressionType expression_type = 4;

  repeated string tag_set = 5;
  repeated int32 code_set = 6;

  map<string, string> properties = 7;

  bool class_filter_mode = 8;
  string filter_class_source = 9;
}

message ConsumeData {
  string group_name = 1;
  ConsumeType consume_type = 2;
  MessageModel message_model = 3;
  ConsumeFrom consume_from = 4;
  repeated SubscriptionData subscription_data_set = 5;
  bool unit_mode = 6;
}

message ProducerData {
  string group_name = 1;
}

message HeartbeatRequest {
  string client_id = 1;
  repeated ConsumeData consume_data_set = 2;

  enum LanguageCode {
    JAVA = 0;
    CPP = 1;
    DOT_NET = 2;
    PYTHON = 3;
    DELPHI = 4;
    ERLANG = 5;
    RUBY = 6;
    OTHER = 7;
    HTTP = 8;
    GO = 9;
    PHP = 10;
    OMS = 11;
  }
  LanguageCode language_code = 3;

  repeated ProducerData producer_data_set = 4;

  string broker_name = 5;
}

message HeartbeatResponse {
  ResponseCode code = 1;
  string remark = 2;
}

message HealthCheckRequest {
  string client_host = 1;
  string broker_name = 2;
}

message HealthCheckResponse {
  ResponseCode code = 1;
  string remark = 2;
}

message ChangeInvisibleTimeRequest {
  string consumer_group = 1;
  string topic = 2;
  int32 queue_id = 3;
  string extra_info = 4;
  int64 offset = 5;
  int64 invisible_time = 6;
  string broker_name = 7;
}

message ChangeInvisibleTimeResponse {
  ResponseCode code = 1;
  string remark = 2;
  int64 pop_time = 3;
  int64 invisible_time = 4;
  int32 revive_queue_id = 5;
}

message PullMessageRequest {
  string broker_name = 1;
  string topic = 2;
  string consumer_group = 3;
  int32 queue_id = 4;
  int64 queue_offset = 5;
  int32 max_message_number = 6;
  int32 system_flag = 7;
  int64 commit_offset = 8;
  int64 suspend_timeout_milliseconds = 9;
  string subscription = 10;
  int64 subscription_version = 11;
  string expression_type = 12;
  string subscription_properties = 13;
}

message PullMessageResponse {
  int64 suggest_broker_id = 1;
  int64 next_begin_offset = 2;
  int64 min_offset = 3;
  int64 max_offset = 4;
  repeated MessageExt messages = 5;
}

message UpdateConsumerOffsetRequest {
  string broker_name = 1;
  string topic = 2;
  string consumer_group = 3;
  int32 queue_id = 4;
  int64 commit_offset = 5;
  // For case of broadcasting
  string client_id = 6;
}

message UpdateConsumerOffsetResponse {
}

service RocketMQ {
  rpc FetchTopicRouteInfo(RouteInfoRequest) returns (RouteInfoResponse) {
  }

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
  }

  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse) {
  }

  rpc QueryAssignment(QueryAssignmentRequest) returns (QueryAssignmentResponse) {
  }

  rpc PopMessage(PopMessageRequest) returns (PopMessageResponse) {
  }

  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse) {
  }

  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {
  }

  rpc ChangeInvisibleTime(ChangeInvisibleTimeRequest) returns (ChangeInvisibleTimeResponse) {
  }

  rpc PullMessage(PullMessageRequest) returns (PullMessageResponse) {
  }

  rpc UpdateConsumerOffset(UpdateConsumerOffsetRequest) returns (PullMessageResponse) {
  }
}